// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to H3
class H3 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  H3(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  H3.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int geoToH3(
    ffi.Pointer<GeoCoord> g,
    int res,
  ) {
    return _geoToH3(
      g,
      res,
    );
  }

  late final _geoToH3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<GeoCoord>, ffi.Int32)>>('geoToH3');
  late final _geoToH3 =
      _geoToH3Ptr.asFunction<int Function(ffi.Pointer<GeoCoord>, int)>();

  void h3ToGeo(
    int h3,
    ffi.Pointer<GeoCoord> g,
  ) {
    return _h3ToGeo(
      h3,
      g,
    );
  }

  late final _h3ToGeoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64, ffi.Pointer<GeoCoord>)>>('h3ToGeo');
  late final _h3ToGeo =
      _h3ToGeoPtr.asFunction<void Function(int, ffi.Pointer<GeoCoord>)>();

  void h3ToGeoBoundary(
    int h3,
    ffi.Pointer<GeoBoundary> gp,
  ) {
    return _h3ToGeoBoundary(
      h3,
      gp,
    );
  }

  late final _h3ToGeoBoundaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint64, ffi.Pointer<GeoBoundary>)>>('h3ToGeoBoundary');
  late final _h3ToGeoBoundary = _h3ToGeoBoundaryPtr
      .asFunction<void Function(int, ffi.Pointer<GeoBoundary>)>();

  int maxKringSize(
    int k,
  ) {
    return _maxKringSize(
      k,
    );
  }

  late final _maxKringSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'maxKringSize');
  late final _maxKringSize = _maxKringSizePtr.asFunction<int Function(int)>();

  int hexRange(
    int origin,
    int k,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _hexRange(
      origin,
      k,
      out,
    );
  }

  late final _hexRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64, ffi.Int32, ffi.Pointer<ffi.Uint64>)>>('hexRange');
  late final _hexRange = _hexRangePtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Uint64>)>();

  int hexRangeDistances(
    int origin,
    int k,
    ffi.Pointer<ffi.Uint64> out,
    ffi.Pointer<ffi.Int32> distances,
  ) {
    return _hexRangeDistances(
      origin,
      k,
      out,
      distances,
    );
  }

  late final _hexRangeDistancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Int32, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Int32>)>>('hexRangeDistances');
  late final _hexRangeDistances = _hexRangeDistancesPtr.asFunction<
      int Function(
          int, int, ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Int32>)>();

  int hexRanges(
    ffi.Pointer<ffi.Uint64> h3Set,
    int length,
    int k,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _hexRanges(
      h3Set,
      length,
      k,
      out,
    );
  }

  late final _hexRangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Uint64>)>>('hexRanges');
  late final _hexRanges = _hexRangesPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint64>, int, int, ffi.Pointer<ffi.Uint64>)>();

  void kRing(
    int origin,
    int k,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _kRing(
      origin,
      k,
      out,
    );
  }

  late final _kRingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint64, ffi.Int32, ffi.Pointer<ffi.Uint64>)>>('kRing');
  late final _kRing =
      _kRingPtr.asFunction<void Function(int, int, ffi.Pointer<ffi.Uint64>)>();

  void kRingDistances(
    int origin,
    int k,
    ffi.Pointer<ffi.Uint64> out,
    ffi.Pointer<ffi.Int32> distances,
  ) {
    return _kRingDistances(
      origin,
      k,
      out,
      distances,
    );
  }

  late final _kRingDistancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64, ffi.Int32, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Int32>)>>('kRingDistances');
  late final _kRingDistances = _kRingDistancesPtr.asFunction<
      void Function(
          int, int, ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Int32>)>();

  int hexRing(
    int origin,
    int k,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _hexRing(
      origin,
      k,
      out,
    );
  }

  late final _hexRingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64, ffi.Int32, ffi.Pointer<ffi.Uint64>)>>('hexRing');
  late final _hexRing =
      _hexRingPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Uint64>)>();

  int maxPolyfillSize(
    ffi.Pointer<GeoPolygon> geoPolygon,
    int res,
  ) {
    return _maxPolyfillSize(
      geoPolygon,
      res,
    );
  }

  late final _maxPolyfillSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GeoPolygon>, ffi.Int32)>>('maxPolyfillSize');
  late final _maxPolyfillSize = _maxPolyfillSizePtr
      .asFunction<int Function(ffi.Pointer<GeoPolygon>, int)>();

  void polyfill(
    ffi.Pointer<GeoPolygon> geoPolygon,
    int res,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _polyfill(
      geoPolygon,
      res,
      out,
    );
  }

  late final _polyfillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GeoPolygon>, ffi.Int32,
              ffi.Pointer<ffi.Uint64>)>>('polyfill');
  late final _polyfill = _polyfillPtr.asFunction<
      void Function(ffi.Pointer<GeoPolygon>, int, ffi.Pointer<ffi.Uint64>)>();

  void h3SetToLinkedGeo(
    ffi.Pointer<ffi.Uint64> h3Set,
    int numHexes,
    ffi.Pointer<LinkedGeoPolygon> out,
  ) {
    return _h3SetToLinkedGeo(
      h3Set,
      numHexes,
      out,
    );
  }

  late final _h3SetToLinkedGeoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint64>, ffi.Int32,
              ffi.Pointer<LinkedGeoPolygon>)>>('h3SetToLinkedGeo');
  late final _h3SetToLinkedGeo = _h3SetToLinkedGeoPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<LinkedGeoPolygon>)>();

  void destroyLinkedPolygon(
    ffi.Pointer<LinkedGeoPolygon> polygon,
  ) {
    return _destroyLinkedPolygon(
      polygon,
    );
  }

  late final _destroyLinkedPolygonPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LinkedGeoPolygon>)>>(
      'destroyLinkedPolygon');
  late final _destroyLinkedPolygon = _destroyLinkedPolygonPtr
      .asFunction<void Function(ffi.Pointer<LinkedGeoPolygon>)>();

  double degsToRads(
    double degrees,
  ) {
    return _degsToRads(
      degrees,
    );
  }

  late final _degsToRadsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'degsToRads');
  late final _degsToRads = _degsToRadsPtr.asFunction<double Function(double)>();

  double radsToDegs(
    double radians,
  ) {
    return _radsToDegs(
      radians,
    );
  }

  late final _radsToDegsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'radsToDegs');
  late final _radsToDegs = _radsToDegsPtr.asFunction<double Function(double)>();

  double pointDistRads(
    ffi.Pointer<GeoCoord> a,
    ffi.Pointer<GeoCoord> b,
  ) {
    return _pointDistRads(
      a,
      b,
    );
  }

  late final _pointDistRadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<GeoCoord>, ffi.Pointer<GeoCoord>)>>('pointDistRads');
  late final _pointDistRads = _pointDistRadsPtr.asFunction<
      double Function(ffi.Pointer<GeoCoord>, ffi.Pointer<GeoCoord>)>();

  double pointDistKm(
    ffi.Pointer<GeoCoord> a,
    ffi.Pointer<GeoCoord> b,
  ) {
    return _pointDistKm(
      a,
      b,
    );
  }

  late final _pointDistKmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<GeoCoord>, ffi.Pointer<GeoCoord>)>>('pointDistKm');
  late final _pointDistKm = _pointDistKmPtr.asFunction<
      double Function(ffi.Pointer<GeoCoord>, ffi.Pointer<GeoCoord>)>();

  double pointDistM(
    ffi.Pointer<GeoCoord> a,
    ffi.Pointer<GeoCoord> b,
  ) {
    return _pointDistM(
      a,
      b,
    );
  }

  late final _pointDistMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<GeoCoord>, ffi.Pointer<GeoCoord>)>>('pointDistM');
  late final _pointDistM = _pointDistMPtr.asFunction<
      double Function(ffi.Pointer<GeoCoord>, ffi.Pointer<GeoCoord>)>();

  double hexAreaKm2(
    int res,
  ) {
    return _hexAreaKm2(
      res,
    );
  }

  late final _hexAreaKm2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>('hexAreaKm2');
  late final _hexAreaKm2 = _hexAreaKm2Ptr.asFunction<double Function(int)>();

  double hexAreaM2(
    int res,
  ) {
    return _hexAreaM2(
      res,
    );
  }

  late final _hexAreaM2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>('hexAreaM2');
  late final _hexAreaM2 = _hexAreaM2Ptr.asFunction<double Function(int)>();

  double cellAreaRads2(
    int h,
  ) {
    return _cellAreaRads2(
      h,
    );
  }

  late final _cellAreaRads2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64)>>(
          'cellAreaRads2');
  late final _cellAreaRads2 =
      _cellAreaRads2Ptr.asFunction<double Function(int)>();

  double cellAreaKm2(
    int h,
  ) {
    return _cellAreaKm2(
      h,
    );
  }

  late final _cellAreaKm2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64)>>(
          'cellAreaKm2');
  late final _cellAreaKm2 = _cellAreaKm2Ptr.asFunction<double Function(int)>();

  double cellAreaM2(
    int h,
  ) {
    return _cellAreaM2(
      h,
    );
  }

  late final _cellAreaM2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64)>>(
          'cellAreaM2');
  late final _cellAreaM2 = _cellAreaM2Ptr.asFunction<double Function(int)>();

  double edgeLengthKm(
    int res,
  ) {
    return _edgeLengthKm(
      res,
    );
  }

  late final _edgeLengthKmPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'edgeLengthKm');
  late final _edgeLengthKm =
      _edgeLengthKmPtr.asFunction<double Function(int)>();

  double edgeLengthM(
    int res,
  ) {
    return _edgeLengthM(
      res,
    );
  }

  late final _edgeLengthMPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'edgeLengthM');
  late final _edgeLengthM = _edgeLengthMPtr.asFunction<double Function(int)>();

  double exactEdgeLengthRads(
    int edge,
  ) {
    return _exactEdgeLengthRads(
      edge,
    );
  }

  late final _exactEdgeLengthRadsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64)>>(
          'exactEdgeLengthRads');
  late final _exactEdgeLengthRads =
      _exactEdgeLengthRadsPtr.asFunction<double Function(int)>();

  double exactEdgeLengthKm(
    int edge,
  ) {
    return _exactEdgeLengthKm(
      edge,
    );
  }

  late final _exactEdgeLengthKmPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64)>>(
          'exactEdgeLengthKm');
  late final _exactEdgeLengthKm =
      _exactEdgeLengthKmPtr.asFunction<double Function(int)>();

  double exactEdgeLengthM(
    int edge,
  ) {
    return _exactEdgeLengthM(
      edge,
    );
  }

  late final _exactEdgeLengthMPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint64)>>(
          'exactEdgeLengthM');
  late final _exactEdgeLengthM =
      _exactEdgeLengthMPtr.asFunction<double Function(int)>();

  int numHexagons(
    int res,
  ) {
    return _numHexagons(
      res,
    );
  }

  late final _numHexagonsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int32)>>('numHexagons');
  late final _numHexagons = _numHexagonsPtr.asFunction<int Function(int)>();

  int res0IndexCount() {
    return _res0IndexCount();
  }

  late final _res0IndexCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('res0IndexCount');
  late final _res0IndexCount = _res0IndexCountPtr.asFunction<int Function()>();

  void getRes0Indexes(
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _getRes0Indexes(
      out,
    );
  }

  late final _getRes0IndexesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint64>)>>(
          'getRes0Indexes');
  late final _getRes0Indexes =
      _getRes0IndexesPtr.asFunction<void Function(ffi.Pointer<ffi.Uint64>)>();

  int pentagonIndexCount() {
    return _pentagonIndexCount();
  }

  late final _pentagonIndexCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('pentagonIndexCount');
  late final _pentagonIndexCount =
      _pentagonIndexCountPtr.asFunction<int Function()>();

  void getPentagonIndexes(
    int res,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _getPentagonIndexes(
      res,
      out,
    );
  }

  late final _getPentagonIndexesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Pointer<ffi.Uint64>)>>('getPentagonIndexes');
  late final _getPentagonIndexes = _getPentagonIndexesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint64>)>();

  int h3GetResolution(
    int h,
  ) {
    return _h3GetResolution(
      h,
    );
  }

  late final _h3GetResolutionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'h3GetResolution');
  late final _h3GetResolution =
      _h3GetResolutionPtr.asFunction<int Function(int)>();

  int h3GetBaseCell(
    int h,
  ) {
    return _h3GetBaseCell(
      h,
    );
  }

  late final _h3GetBaseCellPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'h3GetBaseCell');
  late final _h3GetBaseCell = _h3GetBaseCellPtr.asFunction<int Function(int)>();

  int stringToH3(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _stringToH3(
      str,
    );
  }

  late final _stringToH3Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int8>)>>(
          'stringToH3');
  late final _stringToH3 =
      _stringToH3Ptr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void h3ToString(
    int h,
    ffi.Pointer<ffi.Int8> str,
    int sz,
  ) {
    return _h3ToString(
      h,
      str,
      sz,
    );
  }

  late final _h3ToStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint64, ffi.Pointer<ffi.Int8>, ffi.Uint64)>>('h3ToString');
  late final _h3ToString = _h3ToStringPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int h3IsValid(
    int h,
  ) {
    return _h3IsValid(
      h,
    );
  }

  late final _h3IsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>('h3IsValid');
  late final _h3IsValid = _h3IsValidPtr.asFunction<int Function(int)>();

  int h3ToParent(
    int h,
    int parentRes,
  ) {
    return _h3ToParent(
      h,
      parentRes,
    );
  }

  late final _h3ToParentPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Int32)>>(
          'h3ToParent');
  late final _h3ToParent = _h3ToParentPtr.asFunction<int Function(int, int)>();

  int maxH3ToChildrenSize(
    int h,
    int childRes,
  ) {
    return _maxH3ToChildrenSize(
      h,
      childRes,
    );
  }

  late final _maxH3ToChildrenSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64, ffi.Int32)>>(
          'maxH3ToChildrenSize');
  late final _maxH3ToChildrenSize =
      _maxH3ToChildrenSizePtr.asFunction<int Function(int, int)>();

  void h3ToChildren(
    int h,
    int childRes,
    ffi.Pointer<ffi.Uint64> children,
  ) {
    return _h3ToChildren(
      h,
      childRes,
      children,
    );
  }

  late final _h3ToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint64, ffi.Int32, ffi.Pointer<ffi.Uint64>)>>('h3ToChildren');
  late final _h3ToChildren = _h3ToChildrenPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Uint64>)>();

  int h3ToCenterChild(
    int h,
    int childRes,
  ) {
    return _h3ToCenterChild(
      h,
      childRes,
    );
  }

  late final _h3ToCenterChildPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Int32)>>(
          'h3ToCenterChild');
  late final _h3ToCenterChild =
      _h3ToCenterChildPtr.asFunction<int Function(int, int)>();

  int compact(
    ffi.Pointer<ffi.Uint64> h3Set,
    ffi.Pointer<ffi.Uint64> compactedSet,
    int numHexes,
  ) {
    return _compact(
      h3Set,
      compactedSet,
      numHexes,
    );
  }

  late final _compactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>,
              ffi.Int32)>>('compact');
  late final _compact = _compactPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>, int)>();

  int maxUncompactSize(
    ffi.Pointer<ffi.Uint64> compactedSet,
    int numHexes,
    int res,
  ) {
    return _maxUncompactSize(
      compactedSet,
      numHexes,
      res,
    );
  }

  late final _maxUncompactSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Int32,
              ffi.Int32)>>('maxUncompactSize');
  late final _maxUncompactSize = _maxUncompactSizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  int uncompact(
    ffi.Pointer<ffi.Uint64> compactedSet,
    int numHexes,
    ffi.Pointer<ffi.Uint64> h3Set,
    int maxHexes,
    int res,
  ) {
    return _uncompact(
      compactedSet,
      numHexes,
      h3Set,
      maxHexes,
      res,
    );
  }

  late final _uncompactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, ffi.Int32,
              ffi.Pointer<ffi.Uint64>, ffi.Int32, ffi.Int32)>>('uncompact');
  late final _uncompact = _uncompactPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>, int, int)>();

  int h3IsResClassIII(
    int h,
  ) {
    return _h3IsResClassIII(
      h,
    );
  }

  late final _h3IsResClassIIIPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'h3IsResClassIII');
  late final _h3IsResClassIII =
      _h3IsResClassIIIPtr.asFunction<int Function(int)>();

  int h3IsPentagon(
    int h,
  ) {
    return _h3IsPentagon(
      h,
    );
  }

  late final _h3IsPentagonPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'h3IsPentagon');
  late final _h3IsPentagon = _h3IsPentagonPtr.asFunction<int Function(int)>();

  int maxFaceCount(
    int h3,
  ) {
    return _maxFaceCount(
      h3,
    );
  }

  late final _maxFaceCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'maxFaceCount');
  late final _maxFaceCount = _maxFaceCountPtr.asFunction<int Function(int)>();

  void h3GetFaces(
    int h3,
    ffi.Pointer<ffi.Int32> out,
  ) {
    return _h3GetFaces(
      h3,
      out,
    );
  }

  late final _h3GetFacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64, ffi.Pointer<ffi.Int32>)>>('h3GetFaces');
  late final _h3GetFaces =
      _h3GetFacesPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int32>)>();

  int h3IndexesAreNeighbors(
    int origin,
    int destination,
  ) {
    return _h3IndexesAreNeighbors(
      origin,
      destination,
    );
  }

  late final _h3IndexesAreNeighborsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64, ffi.Uint64)>>(
          'h3IndexesAreNeighbors');
  late final _h3IndexesAreNeighbors =
      _h3IndexesAreNeighborsPtr.asFunction<int Function(int, int)>();

  int getH3UnidirectionalEdge(
    int origin,
    int destination,
  ) {
    return _getH3UnidirectionalEdge(
      origin,
      destination,
    );
  }

  late final _getH3UnidirectionalEdgePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Uint64)>>(
          'getH3UnidirectionalEdge');
  late final _getH3UnidirectionalEdge =
      _getH3UnidirectionalEdgePtr.asFunction<int Function(int, int)>();

  int h3UnidirectionalEdgeIsValid(
    int edge,
  ) {
    return _h3UnidirectionalEdgeIsValid(
      edge,
    );
  }

  late final _h3UnidirectionalEdgeIsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'h3UnidirectionalEdgeIsValid');
  late final _h3UnidirectionalEdgeIsValid =
      _h3UnidirectionalEdgeIsValidPtr.asFunction<int Function(int)>();

  int getOriginH3IndexFromUnidirectionalEdge(
    int edge,
  ) {
    return _getOriginH3IndexFromUnidirectionalEdge(
      edge,
    );
  }

  late final _getOriginH3IndexFromUnidirectionalEdgePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          'getOriginH3IndexFromUnidirectionalEdge');
  late final _getOriginH3IndexFromUnidirectionalEdge =
      _getOriginH3IndexFromUnidirectionalEdgePtr
          .asFunction<int Function(int)>();

  int getDestinationH3IndexFromUnidirectionalEdge(
    int edge,
  ) {
    return _getDestinationH3IndexFromUnidirectionalEdge(
      edge,
    );
  }

  late final _getDestinationH3IndexFromUnidirectionalEdgePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          'getDestinationH3IndexFromUnidirectionalEdge');
  late final _getDestinationH3IndexFromUnidirectionalEdge =
      _getDestinationH3IndexFromUnidirectionalEdgePtr
          .asFunction<int Function(int)>();

  void getH3IndexesFromUnidirectionalEdge(
    int edge,
    ffi.Pointer<ffi.Uint64> originDestination,
  ) {
    return _getH3IndexesFromUnidirectionalEdge(
      edge,
      originDestination,
    );
  }

  late final _getH3IndexesFromUnidirectionalEdgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('getH3IndexesFromUnidirectionalEdge');
  late final _getH3IndexesFromUnidirectionalEdge =
      _getH3IndexesFromUnidirectionalEdgePtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Uint64>)>();

  void getH3UnidirectionalEdgesFromHexagon(
    int origin,
    ffi.Pointer<ffi.Uint64> edges,
  ) {
    return _getH3UnidirectionalEdgesFromHexagon(
      origin,
      edges,
    );
  }

  late final _getH3UnidirectionalEdgesFromHexagonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('getH3UnidirectionalEdgesFromHexagon');
  late final _getH3UnidirectionalEdgesFromHexagon =
      _getH3UnidirectionalEdgesFromHexagonPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Uint64>)>();

  void getH3UnidirectionalEdgeBoundary(
    int edge,
    ffi.Pointer<GeoBoundary> gb,
  ) {
    return _getH3UnidirectionalEdgeBoundary(
      edge,
      gb,
    );
  }

  late final _getH3UnidirectionalEdgeBoundaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint64,
              ffi.Pointer<GeoBoundary>)>>('getH3UnidirectionalEdgeBoundary');
  late final _getH3UnidirectionalEdgeBoundary =
      _getH3UnidirectionalEdgeBoundaryPtr
          .asFunction<void Function(int, ffi.Pointer<GeoBoundary>)>();

  int h3Distance(
    int origin,
    int h3,
  ) {
    return _h3Distance(
      origin,
      h3,
    );
  }

  late final _h3DistancePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64, ffi.Uint64)>>(
          'h3Distance');
  late final _h3Distance = _h3DistancePtr.asFunction<int Function(int, int)>();

  int h3LineSize(
    int start,
    int end,
  ) {
    return _h3LineSize(
      start,
      end,
    );
  }

  late final _h3LineSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64, ffi.Uint64)>>(
          'h3LineSize');
  late final _h3LineSize = _h3LineSizePtr.asFunction<int Function(int, int)>();

  int h3Line(
    int start,
    int end,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _h3Line(
      start,
      end,
      out,
    );
  }

  late final _h3LinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64, ffi.Uint64, ffi.Pointer<ffi.Uint64>)>>('h3Line');
  late final _h3Line =
      _h3LinePtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Uint64>)>();

  int experimentalH3ToLocalIj(
    int origin,
    int h3,
    ffi.Pointer<CoordIJ> out,
  ) {
    return _experimentalH3ToLocalIj(
      origin,
      h3,
      out,
    );
  }

  late final _experimentalH3ToLocalIjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Uint64,
              ffi.Pointer<CoordIJ>)>>('experimentalH3ToLocalIj');
  late final _experimentalH3ToLocalIj = _experimentalH3ToLocalIjPtr
      .asFunction<int Function(int, int, ffi.Pointer<CoordIJ>)>();

  int experimentalLocalIjToH3(
    int origin,
    ffi.Pointer<CoordIJ> ij,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _experimentalLocalIjToH3(
      origin,
      ij,
      out,
    );
  }

  late final _experimentalLocalIjToH3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<CoordIJ>,
              ffi.Pointer<ffi.Uint64>)>>('experimentalLocalIjToH3');
  late final _experimentalLocalIjToH3 = _experimentalLocalIjToH3Ptr.asFunction<
      int Function(int, ffi.Pointer<CoordIJ>, ffi.Pointer<ffi.Uint64>)>();
}

/// @struct GeoCoord
/// @brief latitude/longitude in radians
class GeoCoord extends ffi.Struct {
  /// < latitude in radians
  @ffi.Double()
  external double lat;

  /// < longitude in radians
  @ffi.Double()
  external double lon;
}

/// @struct GeoBoundary
/// @brief cell boundary in latitude/longitude
class GeoBoundary extends ffi.Struct {
  /// < number of vertices
  @ffi.Int32()
  external int numVerts;

  @ffi.Array.multi([10])
  external ffi.Array<GeoCoord> verts;
}

/// @struct GeoPolygon
/// @brief Simplified core of GeoJSON Polygon coordinates definition
class GeoPolygon extends ffi.Struct {
  /// < exterior boundary of the polygon
  external Geofence geofence;

  /// < number of elements in the array pointed to by holes
  @ffi.Int32()
  external int numHoles;

  /// < interior boundaries (holes) in the polygon
  external ffi.Pointer<Geofence> holes;
}

/// @struct Geofence
/// @brief similar to GeoBoundary, but requires more alloc work
class Geofence extends ffi.Struct {
  @ffi.Int32()
  external int numVerts;

  external ffi.Pointer<GeoCoord> verts;
}

class LinkedGeoPolygon extends ffi.Struct {
  external ffi.Pointer<LinkedGeoLoop> first;

  external ffi.Pointer<LinkedGeoLoop> last;

  external ffi.Pointer<LinkedGeoPolygon> next;
}

class LinkedGeoLoop extends ffi.Struct {
  external ffi.Pointer<LinkedGeoCoord> first;

  external ffi.Pointer<LinkedGeoCoord> last;

  external ffi.Pointer<LinkedGeoLoop> next;
}

class LinkedGeoCoord extends ffi.Struct {
  external GeoCoord vertex;

  external ffi.Pointer<LinkedGeoCoord> next;
}

/// @struct CoordIJ
/// @brief IJ hexagon coordinates
///
/// Each axis is spaced 120 degrees apart.
class CoordIJ extends ffi.Struct {
  /// < i component
  @ffi.Int32()
  external int i;

  /// < j component
  @ffi.Int32()
  external int j;
}
